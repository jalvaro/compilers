import java_cup.runtime.Symbol;

class simbol {
    private String ident;
    private String source;
    private String type;
    private String scope;
    
    public simbol (String i, String s, String t, String v)
    {
      this.ident = new String (i);
      this.source = new String (s);
      this.type = new String (t);
      this.scope = new String (v);
    }
    public String getIdent() {
      return this.ident;
    }
    public void setScope( String v) {
      this.scope = new String (v);
    }
    public String toString()
    {
      return new String ( "\t([" + this.ident + "]\t[" + this.source 
                  + "]\t[" + this.type + "]\t[" + this.scope + "])\n" );
    }
}

%%

%cup
%line
%notunix
%unicode

%%

[ \t\r\n]+  {/* IGNORE */}
"//"[^\n]*\n  {/* COMMENT */}
"#"[^\n]*\n  {/* COMMENT */} 
/\*[^]*\*/  {/* COMMENT */}                           
\"[^]*\"                {return new Symbol(sym.STRINGVAL);}
"'"[a-zA-Z0-9]"'"       {return new Symbol(sym.CHARVAL);} 
class                   {return new Symbol(sym.CLASS);}
function                {return new Symbol(sym.FUNCTION);}
return                  {return new Symbol(sym.RETURN);}
if                      {return new Symbol(sym.IF);}
else                    {return new Symbol(sym.ELSE);}
elseif                  {return new Symbol(sym.ELSEIF);}
for                     {return new Symbol(sym.FOR);}
while                   {return new Symbol(sym.WHILE);}
private                 {return new Symbol(sym.PRIVATE);}
protected               {return new Symbol(sym.PROTECTED);}
public                  {return new Symbol(sym.PUBLIC);}
new                     {return new Symbol(sym.NEW);}
const                   {return new Symbol(sym.CONST);}
this                    {return new Symbol(sym.THIS);}
super                   {return new Symbol(sym.SUPER);}
int                     {return new Symbol(sym.INTEGER);}
float                   {return new Symbol(sym.FLOAT);}
string                  {return new Symbol(sym.STRING);}
char                    {return new Symbol(sym.CHAR);}
bool                    {return new Symbol(sym.BOOL);}
print                   {return new Symbol(sym.PRINT);}
read                    {return new Symbol(sym.READ);}
"{"                     {return new Symbol(sym.BEGIN);}
"}"                     {return new Symbol(sym.END);}
"("                     {return new Symbol(sym.LPAR);}
")"                     {return new Symbol(sym.RPAR);}
","                     {return new Symbol(sym.COMMA);}
";"                     {return new Symbol(sym.SEMICOLON);}
"."                     {return new Symbol(sym.DOT);}
"+"                     {return new Symbol(sym.ADD);}
"++"                    {return new Symbol(sym.INC);}
"-"                     {return new Symbol(sym.SUB);}
"--"                    {return new Symbol(sym.DEC);}
"*"                     {return new Symbol(sym.MULT);}
"/"                     {return new Symbol(sym.DIV);}
"^"                     {return new Symbol(sym.EXP);}
"=="                    {return new Symbol(sym.EQUALS);}
">"                     {return new Symbol(sym.GT);}
"<"                     {return new Symbol(sym.LT);}
">="                    {return new Symbol(sym.GE);}
"<="                    {return new Symbol(sym.LE);}
"&&"                    {return new Symbol(sym.AND);}
"||"                    {return new Symbol(sym.OR);}
"!"                     {return new Symbol(sym.NOT);}
"!="                    {return new Symbol(sym.NOTEQUAL);}
"="                     {return new Symbol(sym.ASSIGN);}
true|false              {return new Symbol(sym.BOOLVAL);}
[0-9]+                  {return new Symbol(sym.UINTVAL);}
"+"[0-9]+               {return new Symbol(sym.POSITIVEINTVAL);}
"-"[0-9]+               {return new Symbol(sym.NEGATIVEINTVAL);}
[0-9]+\.[0-9]+          {return new Symbol(sym.UFLOATVAL);}
"+"[0-9]+\.[0-9]+       {return new Symbol(sym.POSITIVEFLOATVAL);}                                                 
"-"[0-9]+\.[0-9]+       {return new Symbol(sym.NEGATIVEFLOATVAL);}
[a-zA-Z_][a-zA-Z_0-9]*  {return new Symbol(sym.ID,new String(yytext()));}
[-+]?[0-9]+\.[^0-9]     {
                              System.out.println("\nLexical error: Unexpected input at "+(yyline+1)+": "+yytext());
                              parser.numLexErrors++;
                        }
[-+]?[^0-9]\.[0-9]+     {
                              System.out.println("\nLexical error: Unexpected input at "+(yyline+1)+": "+yytext());
                              parser.numLexErrors++;
                        }                               
[-+]?\.[0-9]+           {
                              System.out.println("\nLexical error: Unexpected input at "+(yyline+1)+": "+yytext());
                              parser.numLexErrors++;
                        }
[-+]?[0-9]+\.           {
                              System.out.println("\nLexical error: Unexpected input at "+(yyline+1)+": "+yytext());
                              parser.numLexErrors++;
                        }                   
.                       {
                              System.out.println("\nLexical error: Unexpected input at "+(yyline+1)+": "+yytext());
                              parser.numLexErrors++;
                        }